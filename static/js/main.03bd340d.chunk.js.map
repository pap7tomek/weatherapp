{"version":3,"sources":["store/types.ts","store/selectedCity/actions.ts","store/sagas.ts","store/city/actions.ts","store/city/reducer.ts","store/index.ts","store/selectedCity/reducer.ts","components/form/Form.tsx","components/listItem/ListItem.tsx","components/list/List.tsx","components/result/Result.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CityActionTypes","SelectedCityTypes","editSelectedCity","name","temperature","weather","payload","type","EDIT_SELECTED_CITY","load","rootSaga","action","axios","get","data","put","main","temp","console","error","all","takeLatest","initialState","id","status","sagaMiddleware","reduxSaga","rootReducer","combineReducers","city","state","ADD_CITY","REMOVE_CITY","filter","SELECT_CITY","map","selectedCity","store","createStore","composeWithDevTools","applyMiddleware","run","useSelector","Form","dispatch","useDispatch","useState","value","setValue","save","e","preventDefault","Math","random","onSubmit","className","onChange","target","ListItem","select","selectCity","checked","onClick","removeCity","List","cities","Result","ref","useRef","useEffect","current","clearInterval","interval","setInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03bd340d.chunk.js","sourcesContent":["export enum CityActionTypes {\r\n  ADD_CITY = '@@city/ADD_CITY',\r\n  REMOVE_CITY = '@@city/REMOVE_CITY',\r\n  SELECT_CITY = '@@city/SELECT_CITY',\r\n  EDIT_CITY = '@@city/EDIT_CITY'\r\n}\r\n\r\nexport enum SelectedCityTypes {\r\n  EDIT_SELECTED_CITY ='@@selectedCity/EDIT_SELECTED_CITY'\r\n}\r\n\r\nexport interface City {\r\n  id: number;\r\n  name: string;\r\n  status: boolean\r\n}\r\n\r\nexport interface SelectedCity {\r\n  name: string;\r\n  weather?: string;\r\n  temperature?: number;\r\n}\r\n\r\nexport interface CityState {\r\n  readonly data: City[];\r\n}\r\n\r\nexport interface CityActions {\r\n  data: City[];\r\n  payload: City;\r\n  type: CityActionTypes;\r\n}\r\n\r\nexport interface SelectedCityActions {\r\n  payload: {\r\n    name: string;\r\n    weather?: string;\r\n    temperature?: number;\r\n  };\r\n  type: SelectedCityTypes;\r\n}\r\n\r\nexport interface RootState {\r\n  city: CityState;\r\n  selectedCity: SelectedCity;\r\n}\r\n\r\nexport interface AddCity {\r\n  payload: City;\r\n  type: CityActionTypes.ADD_CITY;\r\n}\r\n\r\nexport interface RemoveCity {\r\n  payload: {\r\n    id: number;\r\n  };\r\n  type: CityActionTypes.REMOVE_CITY;\r\n}\r\n\r\nexport interface SelectCity {\r\n  payload: {\r\n    id: number;\r\n    status: boolean;\r\n  };\r\n  type: CityActionTypes.SELECT_CITY;\r\n}\r\n\r\nexport interface EditSelectedCity {\r\n  payload: {\r\n    name: string;\r\n    weather?: string;\r\n    temperature?: number | null;\r\n  };\r\n  type: SelectedCityTypes.EDIT_SELECTED_CITY\r\n}","import { EditSelectedCity, SelectedCityTypes } from \"../types\";\r\n\r\nexport const editSelectedCity = (\r\n  name: string,\r\n  temperature: number | null,\r\n  weather: string\r\n): EditSelectedCity => ({\r\n  payload: {\r\n    name,\r\n    temperature,\r\n    weather\r\n  },\r\n  type: SelectedCityTypes.EDIT_SELECTED_CITY,\r\n});","import { all, put, takeLatest } from \"redux-saga/effects\";\r\nimport { editSelectedCity } from \"./selectedCity\"\r\nimport axios from \"axios\";\r\n\r\nexport function* load(action: {payload: {name: string}, type: string}) {\r\n  try {\r\n    const { data } = yield axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${action.payload.name}&units=metric&APPID=d94df1ef060b7fe3d3983bf5ee471190`);\r\n    yield put(editSelectedCity(action.payload.name, data.main.temp, data.weather[0].main))\r\n    \r\n\r\n  } catch (error) {\r\n      console.error('error here!')\r\n  }\r\n}\r\n\r\nexport function* rootSaga(): Generator {\r\n    return yield all([\r\n        takeLatest(\"FETCH_WEATHER\", load),\r\n    ]);\r\n  }","import { AddCity, RemoveCity, SelectCity, CityActionTypes } from \"../types\";\r\n\r\nexport const addCity = (\r\n  name: string,\r\n  weather: string,\r\n  temperature: number\r\n): AddCity => ({\r\n  payload: {\r\n    id: Math.random(),\r\n    name,\r\n    status: false,\r\n  },\r\n  type: CityActionTypes.ADD_CITY,\r\n});\r\n\r\nexport const removeCity = (id: number): RemoveCity => ({\r\n  payload: {\r\n    id,\r\n  },\r\n  type: CityActionTypes.REMOVE_CITY,\r\n});\r\n\r\nexport const selectCity = (id: number, status: boolean): SelectCity => ({\r\n  payload: {\r\n    id,\r\n    status\r\n  },\r\n  type: CityActionTypes.SELECT_CITY, \r\n});\r\n","import { CityActions, CityActionTypes, CityState } from \"../types\";\r\n\r\nexport const initialState: CityState = {\r\n  data: [\r\n    {\r\n      id: 1,\r\n      name: \"Warszawa\",\r\n      status: false,\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"PoznaÅ„\",\r\n        status: false,  \r\n    },\r\n  ],\r\n};\r\n\r\nexport const city = (state = initialState, action: CityActions) => {\r\n  switch (action.type) {\r\n    case CityActionTypes.ADD_CITY:\r\n      return {\r\n        data: [\r\n          ...state.data,\r\n          {\r\n            id: action.payload.id,\r\n            name: action.payload.name,\r\n            status: false\r\n          },\r\n        ],\r\n      };\r\n\r\n    case CityActionTypes.REMOVE_CITY:\r\n      return {\r\n        data: state.data.filter((city) => city.id !== action.payload.id),\r\n      };\r\n    case CityActionTypes.SELECT_CITY:\r\n      return {\r\n        data: state.data.map((city) => ({\r\n          ...city,\r\n          status: city.id === action.payload.id && action.payload.status,\r\n        })),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reduxSaga from 'redux-saga';\r\nimport { rootSaga } from './sagas';\r\nimport { initialState as cityInitialState, city }  from './city';\r\nimport { initialState as selectedCityInitialState, selectedCity} from './selectedCity';\r\n\r\nexport const initialState = {\r\n      city: cityInitialState,\r\n      citySelected: selectedCityInitialState\r\n    },\r\n    sagaMiddleware = reduxSaga(),\r\n    rootReducer = combineReducers({\r\n        city,\r\n        selectedCity\r\n\r\n    }),\r\n    store = createStore(rootReducer, {}, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<AppState> = useSelector;","\r\nimport { SelectedCityTypes, SelectedCityActions } from '../types'\r\n\r\nexport const initialState: string = '';\r\n\r\nexport const selectedCity = (state = initialState, action: SelectedCityActions) => {\r\n    switch (action.type) {\r\n        case SelectedCityTypes.EDIT_SELECTED_CITY:\r\n            return {\r\n                name: action.payload.name,\r\n                temperature: action.payload.temperature,\r\n                weather: action.payload.weather\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React, { useState } from 'react';\r\nimport { addCity } from '../../store/city';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nexport const Form: React.FC = () => {\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n \r\n  const [value, setValue] = useState(\"\");\r\n  const save = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!value) {\r\n      return\r\n    }\r\n    dispatch(addCity(value, value, 1));\r\n    setValue(\"\")\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={(e) => save(e)}>\r\n      <label>\r\n        <input className=\"Input\" type=\"text\" value={value} onChange={(e) => setValue(e.target.value)} />\r\n      </label>\r\n      <input className=\"Button\" type=\"submit\" value=\"Dodaj\" />\r\n    </form>\r\n  )\r\n}","import React from 'react';\r\nimport { removeCity, selectCity } from '../../store/city';\r\nimport { editSelectedCity } from '../../store/selectedCity';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\n\r\nexport const ListItem: React.FC<{\r\n  id: number, \r\n  name: string,\r\n  status: boolean\r\n}> = ({id, name, status}) => {\r\n  const dispatch: Dispatch<any> = useDispatch()\r\n\r\n  const remove = () => {\r\n    dispatch(removeCity(id))\r\n    if (status) {\r\n      dispatch(editSelectedCity('', null, ''));\r\n    }\r\n  }\r\n\r\n  const select = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(selectCity(id, e.target.checked));\r\n    dispatch(editSelectedCity(e.target.checked ? name : '', null, ''));\r\n  }\r\n\r\n  return (\r\n    <div className=\"ListItem\">\r\n      <span>{name}</span>\r\n      <div>\r\n      <input className=\"Checkbox\" checked={status || false} onChange={(e) => select(e)} type=\"checkbox\"></input>\r\n      <span className=\"Cursor\" onClick={remove}>x</span>\r\n      </div>\r\n      \r\n    </div>  \r\n  )\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/types';\r\nimport { ListItem } from '../listItem/ListItem';\r\n\r\nexport const List: React.FC = () => {\r\n  const cities = useSelector((state: RootState) => state.city).data;\r\n\r\n  return (\r\n    <div>\r\n      {cities.map(city => (\r\n        <ListItem key={city.id} id={city.id} status={city.status} name={city.name}/>\r\n      ))}\r\n    </div>\r\n   \r\n  )\r\n}","import React, { useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { RootState } from '../../store/types';\r\n\r\nexport const Result: React.FC = () => {\r\n  const selectedCity = useSelector((state: RootState) => state.selectedCity);\r\n  const ref: {current: ReturnType<typeof setInterval> | null} = useRef(null);\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if(selectedCity.name) {\r\n      if (ref.current !== null ) {\r\n        clearInterval(ref.current)\r\n      }\r\n      dispatch({type: 'FETCH_WEATHER', payload: { name: selectedCity.name}})\r\n      let interval = setInterval(() => {\r\n        dispatch({type: 'FETCH_WEATHER', payload: { name: selectedCity.name}})\r\n      }, 10000)\r\n      ref.current = interval;\r\n    } else {\r\n      if (ref.current !== null) {\r\n        clearInterval(ref.current)\r\n        ref.current = null;\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [selectedCity.name])\r\n\r\n  return (\r\n    <div>\r\n      <p>{selectedCity.name}</p>\r\n      <p>{selectedCity.temperature? `Temperatura: ${selectedCity.temperature}`: ''}</p>\r\n      <p>{selectedCity.weather? `Pogoda: ${selectedCity.weather}`: ''}</p>\r\n    </div>\r\n   \r\n  )\r\n}","import React from 'react';\nimport { Provider } from 'react-redux';\nimport './App.scss';\nimport { store } from './store';\nimport { Form } from './components/form/Form';\nimport { List } from './components/list/List';\nimport { Result } from './components/result/Result';\n\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n\n    <div className=\"App-header\">\n      <div className=\"Form\">\n        <Form/>\n        <List/>\n      </div>\n     \n      <div className=\"Result\">\n        <Result/>\n      </div>\n    </div>\n    \n    \n    \n  </Provider>\n);\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.tsx</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}